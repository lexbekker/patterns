Проблема:
Мы работаем над библиотекой оповещений, которую можно подключать к разнообразным программам,
чтобы получать уведомления о важных событиях.
0. Базовый класс Notificator с методом send(), принимает строку и рассылает администраторам по email.
1. Сторонняя программа создаёт и настраивает этот объект, указав, кому слать сообщения, а затем использовать
его каждый раз, когда что-то случается.
2. Некоторые хотят получать по смс, другие хотят получать в соц.сеть.
3. Добавляем разные виды оповещений, наследуя их от базового класса Notificator.
    Теперь пользователь выбирает одигн из видов оповещений.
4. Почему нельзя выбрать несколько видов оповещений сразу?
    Пытаемся реализовать все возможные комбинации подклассов оповещений,
    код начал раздуваться просто пизданёшься до каких размеров.
5. Итак, нужен какой-то другой способ комбинировать поведения объектов, который не приводит к взрыву количества подклассов

Решение:
Механизм наследования имеет несколько досадных проблем:
    1. Он статичен, не можем изменить поведение существующего объекта, нужно создавать новый объект, выбрав другой подкласс
    2. Не разрешает наследовать поведение нескольких классов одновременно.
Способ обойти эти проблемы: механизм композиции.
Альтернативное название паттерна Декоратор - Обёртка.

Суть паттерна: Помещаем целевой объект в другой объект-обёртку, который запускает базовое поведение объекта,
    а потом добавляет к результату что-то своё.
Оба объекта имеют общий интерфейс, для пользователя нет разницы с каким объектом работать - обёрнутым или оригинальным.
Из чего состоит паттерн:
    1. Компонент - задаёт общий интерфейс обёрток и оборачиваемых объектов
    2. Конкретный компонент - содержит какое-то базовое поведение, которое потом изменяют декораторы.
        Определяет класс оборачиваемых объектов (обёрток).
    3. Базовый декоратор - хранит ссылку на вложенный объект-компонент, им может быть конкретный объект или конкретный декоратор.
        Базовый декоратор делегирует свои функции вложенному объекту, доп.поведение будет жить в доп.декораторах
    4. Конкретные декораторы - различные вариации декораторов, которые содержат добавочное поведение. Оно выполняется до
        или после вызова аналогичного поведения обёрнутого объекта.
    5. Клиент может оборачивать простые компоненты и декораторы в другие декораторы, стараясь работать со всеми объектами
        через общий интерфейс компонентов.