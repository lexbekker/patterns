Строитель - создание сложных объектов пошагово.
Использование одного кода строительства для получения разных представлений объектов.

Дано: сложный объект, требующий кропотливой пошаговой инициализации множества полей и вложенных объектов.
Код инициализации либо спрятан внутри монструозного конструктора, либо распылён по клиентскому коду.
Для создания различных вариаций объектов можно создать кучу подклассов для всех комбинаций.
============================================================================================================
Проблема: громадное количество подклассов.
Чтобы не плодить подклассы, можно создать гигантский конструктор с кучей параметров и монструозными вызовами.
============================================================================================================
Решение: выносим конструирование объектв за пределы его класса, поручая его объектам-строителям.
Разбиваем построение на отдельные шаги, и вызываем только нужные для требуемой конфигурации.
Шаги могут отличаться по своей сути, поэтому реализуем несколько классов строителей для реализации одного и того же
строительного процесса, получая на выходе различные объекты.
============================================================================================================
Можно пойти дальше и создать Директора, которому мы будем передавать строителя, а он уже сам вызывает его шаги и
вернёт готовый объект. В этом случае мы объединяем всю логику строительства в одном классе.
Таким образом мы скрываем процесс конструирования объектов от клиентского кода, останется только привязать
желаемого строителя к директору, а затем получить у директора готовый результат.
============================================================================================================
Участники: Интерфейс Строителя - Конкретные строители - Продукт - Директор.
Пример: Конфигурация автомобиля. Выбираем строителя под конкретный автомобиль и пошагово собираем его, не вдаваясь
в подробности его кишочков и как реализованы его составляющие.
============================================================================================================
Применимость: 1. Не хотим юзать телескопический конструктор
    2. Код должен создавать разные представления какого-то объекта
    3. Нужно собирать сложные составные объекты
